


[gcode_macro HOTEND_FAN_CHECK]
variable_hotend_stop_count: 0
gcode:
    {% set min_rpm = 3000|float %}
    {% set max_consecutive_stops = 3 %}
    {% set req_speed = printer['temperature_fan toolhead_heatsink'].speed|default(0)|float %}
    {% set rpm = printer['temperature_fan toolhead_heatsink'].rpm|default(0)|float %}
    {% set hotend_stop = printer["gcode_macro HOTEND_FAN_CHECK"].hotend_stop_count|int %}

    # Only check if the hotend‐fan is commanded ON, and tachometer is present
    {% if req_speed > 0.0 and rpm is not none and rpm < min_rpm %}
        SET_GCODE_VARIABLE MACRO=HOTEND_FAN_CHECK VARIABLE=hotend_stop_count VALUE={hotend_stop + 1}
        {% if printer["gcode_macro HOTEND_FAN_CHECK"].hotend_stop_count >= 1 %}
            M118 WARNING: Hotend fan stoppage detected ({hotend_stop + 1}/{max_consecutive_stops}).
            M400
            {% if printer["gcode_macro HOTEND_FAN_CHECK"].hotend_stop_count|int >= max_consecutive_stops - 1 %}
                FAN_STOPPAGE_ROUTINE FAN_NAME="Hotend"
            {% endif %}
        {% endif %}
    {% else %}
        SET_GCODE_VARIABLE MACRO=HOTEND_FAN_CHECK VARIABLE=hotend_stop_count VALUE=0
    {% endif %}



[gcode_macro MD_FAN_CHECK]
variable_md_stop_count: 0
gcode:
    {% set min_rpm = 2000|float %}
    {% set max_consecutive_stops = 3 %}
    {% set req_speed = printer['temperature_fan Motor_Drivers'].speed|default(0)|float %}
    {% set rpm = printer['temperature_fan Motor_Drivers'].rpm|default(0)|float %}
    {% set md_stop = printer["gcode_macro MD_FAN_CHECK"].md_stop_count|int %}

    # Only check if the motor-drivers fan is commanded ON, and tachometer present
    {% if req_speed > 0.0 and rpm is not none and rpm < min_rpm %}
        SET_GCODE_VARIABLE MACRO=MD_FAN_CHECK VARIABLE=md_stop_count VALUE={md_stop + 1}
        {% if printer["gcode_macro MD_FAN_CHECK"].md_stop_count >= 1 %}
            M118 WARNING: Motor-drivers fan stoppage detected ({md_stop + 1}/{max_consecutive_stops}).
            M400
            {% if printer["gcode_macro MD_FAN_CHECK"].md_stop_count|int >= max_consecutive_stops - 1 %}
                FAN_STOPPAGE_ROUTINE FAN_NAME="Motor Drivers"
            {% endif %}
        {% endif %}
    {% else %}
        SET_GCODE_VARIABLE MACRO=MD_FAN_CHECK VARIABLE=md_stop_count VALUE=0
    {% endif %}

[gcode_macro PSU_FAN_CHECK]
variable_ps_stop_count: 0
gcode:
    {% set min_rpm = 2000|float %}
    {% set max_consecutive_stops = 3 %}
    {% set req_speed = printer['controller_fan Power_Supply'].speed|default(0)|float %}
    {% set rpm = printer['controller_fan Power_Supply'].rpm|default(0)|float %}
    {% set ps_stop = printer["gcode_macro PSU_FAN_CHECK"].ps_stop_count|int %}

    # Only check if the PSU fan is commanded ON, and tachometer present
    {% if req_speed > 0.0 and rpm is not none and rpm < min_rpm %}
        SET_GCODE_VARIABLE MACRO=PSU_FAN_CHECK VARIABLE=ps_stop_count VALUE={ps_stop + 1}
        {% if printer["gcode_macro PSU_FAN_CHECK"].ps_stop_count >= 1 %}
            M118 WARNING: PSU fan stoppage detected ({ps_stop + 1}/{max_consecutive_stops}).
            M400
            {% if printer["gcode_macro PSU_FAN_CHECK"].ps_stop_count|int >= max_consecutive_stops - 1 %}
                FAN_STOPPAGE_ROUTINE FAN_NAME="Power Supply"
            {% endif %}
        {% endif %}
    {% else %}
        SET_GCODE_VARIABLE MACRO=PSU_FAN_CHECK VARIABLE=ps_stop_count VALUE=0
    {% endif %}


[gcode_macro CPU_FAN_CHECK]
variable_cpu_stop_count: 0
gcode:
    {% set min_rpm = 1000|float %}
    {% set max_consecutive_stops = 3 %}
    {% set req_speed = printer['temperature_fan CPU'].speed|default(0)|float %}
    {% set rpm = printer['temperature_fan CPU'].rpm|default(0)|float %}
    {% set cpu_stop = printer["gcode_macro CPU_FAN_CHECK"].cpu_stop_count|int %}

    # Only check if rpm is not None (i.e. tachometer is present and returning data)
    {% if req_speed > 0.0 and rpm is not none and rpm < min_rpm %}
        SET_GCODE_VARIABLE MACRO=CPU_FAN_CHECK VARIABLE=cpu_stop_count VALUE={cpu_stop + 1}
        {% if  printer["gcode_macro CPU_FAN_CHECK"].cpu_stop_count >= 1 %}
            M118 WARNING: CPU fan stoppage detected ({cpu_stop + 1}/{max_consecutive_stops}).
            M400
            {% if printer["gcode_macro CPU_FAN_CHECK"].cpu_stop_count|int >= max_consecutive_stops - 1 %}
                FAN_STOPPAGE_ROUTINE FAN_NAME="CPU"
            {% endif %}
        {% endif %}
    {% else %}
        SET_GCODE_VARIABLE MACRO=CPU_FAN_CHECK VARIABLE=cpu_stop_count VALUE=0
    {% endif %}


#──────────────────────────────────────────────────────────────────────────────
# 7) MASTER ROUTINE—invoke every 3 s and call each fan check in turn.
#──────────────────────────────────────────────────────────────────────────────
[delayed_gcode CHECK_ALL_FANS]
initial_duration: 1.
gcode:
    HOTEND_FAN_CHECK
    CPU_FAN_CHECK
    MD_FAN_CHECK
    PSU_FAN_CHECK
    # Reschedule ourselves in 3 seconds
    UPDATE_DELAYED_GCODE ID=CHECK_ALL_FANS DURATION=3


#──────────────────────────────────────────────────────────────────────────────
# 8) FAN_STOPPAGE_ROUTINE (your existing routine, repeated verbatim):
#──────────────────────────────────────────────────────────────────────────────
[gcode_macro FAN_STOPPAGE_ROUTINE]
gcode:
    {% if printer.print_stats.state == "printing" %}
        {% set err_msg = params.FAN_NAME|default("unknown fan") + " Fan is not working. Your Print has been Paused." %}
    {% else %}
        {% set err_msg = params.FAN_NAME|default("unknown fan") + " Fan is not working." %}
    {% endif %}

    # If not already paused
    {% if printer['pause_resume'].is_paused|int == 0 %}
        M117 {params.FAN_NAME|default("unknown fan")} FAN ERROR
        M118 {params.FAN_NAME|default("unknown fan")} FAN ERROR. PAUSING...

        # Turn off the hotend. 
        # !! Don't forget to turn your hotend back on before resume. !!
        # -- If using pause/resume macros, the hotend will automatically reheat on resume
        PAUSE
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0

        RESPOND TYPE=command MSG="action:prompt_begin Fan Error"
        RESPOND TYPE=command MSG="action:prompt_text {err_msg}"
        RESPOND TYPE=command MSG="action:prompt_show"


        #{action_emergency_stop("FAN MALFUNCTION")}
    {% endif %}