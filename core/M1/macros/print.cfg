#####################################################################
#   Print Macros
#####################################################################

[gcode_macro FINETUNE_RESONANCE]
variable_has_run: 0
description: Sweep ±5 Hz around current input shaper freqs—but only once per power-cycle
gcode:

    {% set already = printer["gcode_macro FINETUNE_RESONANCE"].has_run|int %}
    {% if already == 0 %}
        # --- first run: do the calibration sweep ---
        {% set fx = printer.configfile.settings.input_shaper.shaper_freq_x|default(55)|float %}
        {% set fy = printer.configfile.settings.input_shaper.shaper_freq_y|default(80)|float %}

        SHAPER_CALIBRATE AXIS=x FREQ_START={fx - 5} FREQ_END={fx + 5} HZ_PER_SEC=2
        SHAPER_CALIBRATE AXIS=y FREQ_START={fy - 5} FREQ_END={fy + 5} HZ_PER_SEC=2
        #TODO Change how the SHAPER_CALIBRATE works, to allow us to do the calculations after we have tested both axes, rather than twice for ecach one, to save time (~5s per axis to calibrate)

        # mark that we’ve run once
        SET_GCODE_VARIABLE MACRO=FINETUNE_RESONANCE VARIABLE=has_run VALUE=1
    {% else %}
    # --- subsequent calls skip ---
        M118 FINETUNE_RESONANCE already run this session, skipping
    {% endif %}

[gcode_macro PRINT_START]
description: print startup sequence
gcode:
    {% set BED_TEMP = params.BED|default(65)|float %}
    {% set READY_TEMP = BED_TEMP * 0.7 %}
    {% set PREHEAT_EXTRUDER_TEMP = 150 %}
    {% set EXTRUDER_TEMP = params.EXTRUDER|default(190)|float %}

    SAVE_GCODE_STATE NAME=STATE_PRINT_START
    #LED_PENDING
    ;PCF_CHECK                          ; test part cooling fan, disable for fans without tachometer
    M107                                ; turn off part fan
    M140 S{BED_TEMP}                    ; set bed temperature
    M104 S{PREHEAT_EXTRUDER_TEMP}
    G28                                 ; home all
    BED_TILT_CALIBRATE
    FINETUNE_RESONANCE
    SAVE_CONFIG NO_RESTART=1 #permanently saves resonances and bed tilt, important for finetune resonances

    #NOZZLE_DOCK                         ; move the nozzle to docking position
    G90
    G0 X200 Y0 F7800
    G0 Z40 F1000
    TEMPERATURE_WAIT SENSOR="heater_bed" MINIMUM={READY_TEMP}   ; wait for bed to mostly heat up, limiting ooze


    M104 S{EXTRUDER_TEMP}
    TEMPERATURE_WAIT SENSOR="extruder" MINIMUM={190}   
    G1 E-0.4 F500 #RETRACT to limit ooze

    M109 S{EXTRUDER_TEMP}               ; set and wait for hot end temperature
    M190 S{BED_TEMP}                    ; wait for bed temperature
    # NOZZLE_UNDOCK                       ; undock the nozzle 


    G90                                 ; use absolute coordinates
    RESTORE_GCODE_STATE NAME=STATE_PRINT_START
    #LED_WORKING
    # NOZZLE_PURGE #do nozzle purge in slicer


# [gcode_macro PCF_CHECK]
# description: Use before print startup, checks the part fan for failures
# gcode:
#     M106 S50       ; turn on the part fan

#     G4 P2000        ; wait for the fan to spin up
#     M400            ; wait for wait to finish
#     _PCF_CHECKER    ; check part fan speed & respond
#     M106 S0         ; turn off the part fan


# [gcode_macro _PCF_CHECKER]
# description: Helper macro for PCF_CHECK
# gcode:
#     {% if printer.fan.rpm is not none %}
#         {% if printer.fan.rpm > 500 %}
#             {action_respond_info("Part cooling fan self-test: PASS")}
#         {% else %}
#             CANCEL_PRINT
#             {action_respond_info("Part cooling fan self-test: FAIL!")}
#         {% endif %}
#     {% endif %}


# [gcode_macro NOZZLE_PURGE]
# description: Draw a purge line at the front left edge of the build plate
# gcode:
#     G28 O
#     SAVE_GCODE_STATE NAME=NOZZLE_PURGE
#     G90                     ; Use absolute coordinates
#     G0 X0 Y40 F7200         ; Go to side
#     G0 Z0.2                 ; Drop to bed
#     M83                     ; Set extruder to relative mode
#     G1 X0 Y135 E30 F800     ; print prime line
#     G1 E-0.5 F400           ; Retract a little
#     G1 Y170 F4000           ; Quickly wipe away from the filament line
#     G1 Z0.4                 ; Raise and begin printing.
#     RESTORE_GCODE_STATE NAME=NOZZLE_PURGE


# [gcode_macro NOZZLE_DOCK]
# description: Docks the nozzle at the corner of the bed to prevent ooze
# variable_dock_x: 3.5
# variable_dock_y: 1.0
# variable_dock_z: 0.0
# gcode:
#     G28 O
#     SAVE_GCODE_STATE NAME=NOZZLE_DOCK
#     G91                           ; relative positioning
#     G1 Z5                         ; move nozzle upwards slightly
#     G90                           ; absolute positioning
#     G0 X{dock_x} Y{dock_y} F7200  ; Go dock position
#     G0 Z{dock_z}
#     RESTORE_GCODE_STATE NAME=NOZZLE_DOCK


# [gcode_macro NOZZLE_UNDOCK]
# description: Safely moves the nozzle out of its docking position
# gcode:
#     G28 O
#     SAVE_GCODE_STATE NAME=NOZZLE_UNDOCK
#     G91                            ; relative positioning
#     G1 Z10                         ; move nozzle upwards slightly
#     RESTORE_GCODE_STATE NAME=NOZZLE_UNDOCK


[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    TURN_OFF_HEATERS
    CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 2.0) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    PAUSE_BASE
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E-{E} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}
      G1 Z{z_safe} F900
      G90
      G1 X{x_park} Y{y_park} F6000
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %} 
    
[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    #### get VELOCITY parameter if specified ####
    {% if 'VELOCITY' in params|upper %}
      {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
      {% set get_params = "" %}
    {% endif %}
    ##### end of definitions #####
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G91
      G1 E{E} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}  
    RESUME_BASE {get_params}



[gcode_macro PRINT_END]
description: print finish sequence
gcode:
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    {% set y_final = th.axis_maximum.y - 1 %}
    {% set z_final = [th.position.z + 50, th.axis_maximum.z]|min %}

    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    M400                                     ; wait for buffer to clear
    G92 E0                                   ; zero the extruder
    G1 E-5.0 F3600                           ; retract filament
    TURN_OFF_HEATERS

    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X200 Y0 F3600                   ; park the toolhead to the front corner
    G0 Z{z_final} F600                       ; raise the bed

    M107                                     ; turn off part fan
    LED_COMPLETE
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END